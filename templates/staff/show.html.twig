{% extends 'base.html.twig' %}

{# Permet de rendre la récuperation des données plus pratique #}
{% set dataThisStaff = dataOneStaff.data.Staff %}

{% block meta_description %}Discover all the details about {{ dataThisStaff.name.full|default('Unknown') }}{% endblock %}

{% block title %}{{ dataThisStaff.name.full|default('Unknown') }}{% endblock %}

{% block body %}
    <main class="animeContainer">
        <div class="animeTopContainer">
            <div class="animeTopLeftContent">
                <figure>
                    <img src="{{ dataThisStaff.image.large }}" alt="{{ dataThisStaff.name.full|default('Unknown') }}" class="animeImage">
                </figure>
            </div>
            <div class="animeTopRightContent">
                <h1 class="animeTitle">{{ dataThisStaff.name.full|default('Unknown') }}</h1>
                <p class="animeSynopsisContent"><b>Age :</b> {{ dataThisStaff.age|default('Unknown') }}</p>
                <p class="animeSynopsisContent"><b>Gender :</b> {{ dataThisStaff.gender|default('Unknown') }}</p>
                {# Voir les différents contenu des description pour adapter l'affichage #}
                <p class="animeSynopsisContent">
                    {{ dataThisStaff.description ? dataThisStaff.description|raw|nl2br : "No description yet" }}
                </p>
            </div>
        </div>
        <div class="characterRemainingContainer">
            {# Si ce membre de staff a doublé des personnages, alors on l'affiche #}
            {% if dataThisStaff.characters.edges %}
                <h2 class="characterPartTitle">APPEARANCES</h2>
                <div class="homeMultipleAnimes autoFill">
                {# Pour chaque personnage incarné par le doubleur #}
                {% for character in dataThisStaff.characters.edges %}
                    {# On définit des variables pour manipuler les données de l'API plus facilement #}
                    {% set characterId = character.node.id %}
                    {% set characterName = character.node.name.full|default('Unknown') %}
                    {% set characterImage = character.node.image.medium %}
                    
                    {# Pour chaque anime dans lequel le personnage apparaît, on affiche cette animé #}
                    {% for anime in character.node.media.nodes %}
                        {# On définit des variables pour manipuler les données de l'API plus facilement #}
                        {% set animeId = anime.id %}
                        {% set animeTitle = anime.title.romaji|default('Unknown') %}
                        {% set animeCoverImage = anime.coverImage.large %}
                        <figure class="homeOneAnime">
                            <a href="{{ path('show_character', { 'id' : characterId }) }}" title="{{ characterName }}"><img src="{{ characterImage }}" alt="{{ characterName }}" class="characterRemainingVoiceActorImage"></a>
                            <a href="{{ path('show_anime', { 'id' : animeId }) }}" title="{{ animeTitle }}">
                                <div class="homeOneAnimeImageInfo">
                                    <img src="{{ animeCoverImage }}" alt="Cover Image of {{ animeTitle }}" class="homeOneAnimeImage">
                                </div>
                            </a>
                            <figcaption class="homeOneAnimeTitle"><a href="{{ path('show_anime', { 'id' : animeId }) }}" title="{{ animeTitle }}">{{ animeTitle }}</a></figcaption>
                        </figure>
                    {% endfor %}
                {% endfor %}
                </div>
            {% endif %}

            {# On va créer un tableau pour regrouper les animés où le membre du staff a eu plusieurs rôles #}
            {% set animeRoles = {} %}
            {% for media in dataThisStaff.staffMedia.edges %}
                {# On récupère les données que l'ont veut (id, title, coverImage et staffRole) #}
                {% set id = media.node.id %}
                {% set title = media.node.title.romaji|default('Unknown') %}
                {% set coverImage = media.node.coverImage.large %}
                {% set role = media.staffRole %}
                {# On vérifie si l'anime est défini dans animeRoles #}
                {% if animeRoles[title] is not defined %}
                    {# Si l'animé n'est pas définie, on le crée #}
                    {% set animeRoles = animeRoles|merge({(title): {'id': id, 'title': title, 'coverImage': coverImage, 'roles': [role]}}) %}
                {% else %}
                    {# Sinon on ajoute le rôle à l'animé existant #}
                    {% set animeRoles = animeRoles|merge({(title): animeRoles[title]|merge({'roles': animeRoles[title].roles|merge([role])})}) %}
                {% endif %}
            {% endfor %}
            
            {# Si ce membre de staff est dans des staffs d'animés, alors on l'affiche #}
            {% if animeRoles|length > 0 %}
                <h2 class="characterPartTitle">ROLES IN ANIME STAFFS</h2>
                <div class="homeMultipleAnimes autoFill">
                {# On fait l'affichage grâce a animeRoles #}
                {% for anime in animeRoles %}
                    <figure class="homeOneAnime">
                        <a href="{{ path('show_anime', { 'id' : anime.id }) }}" title="{{ anime.title|default('Unknown') }}">
                            <div class="homeOneAnimeImageInfo">
                                <img src="{{ anime.coverImage }}" alt="Cover Image of {{ anime.title|default('Unknown') }}" class="homeOneAnimeImage">
                                <div class="homeHoverContent">
                                {% for role in anime.roles %}
                                    <p class="characterRemainingVoiceActorName roles">- {{ role }}</p>
                                {% endfor %}
                                </div>
                            </div>
                        </a>
                        <figcaption class="homeOneAnimeTitle"><a href="{{ path('show_anime', { 'id' : anime.id }) }}" title="{{ anime.title|default('Unknown') }}">{{ anime.title|default('Unknown') }}</a></figcaption>
                    </figure>
                {% endfor %}
                </div>
            {% endif %}
        </div>
    </main>
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script>
        // On sélectionne tout les textes de spoils
        const spoilerContentSpans = document.querySelectorAll('.spoilerContent');
        
        // Pour chaque spoil
        spoilerContentSpans.forEach(spoilerContent => {
            // On crée un span qui servira à afficher le texte spoil
            const spoilerButton = document.createElement('span');
            // On lui ajoute une classe
            spoilerButton.className = 'spoiler';
            // On lui ajoute du texte
            spoilerButton.textContent = '[SPOILER]';
            // Et on ajoute un écouteur d'évènement click sur celui-ci
            spoilerButton.addEventListener('click', () => {
                // On affiche/n'affiche pas le contenu spoil en fonction de chaque click
                spoilerContent.classList.toggle('visible');
            });
            // Le span créé sera placé avant le texte spoil qui lui correspond
            spoilerContent.parentNode.insertBefore(spoilerButton, spoilerContent);
        });
    </script>
{% endblock %}