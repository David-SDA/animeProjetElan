{% extends 'base.html.twig' %}

{# Permet de rendre la récuperation des données plus pratique #}
{% set dataThisCharacter = dataOneCharacter.data.Character %}

{% block meta_description %}Discover all the details about {{ dataThisCharacter.name.full|default('Unknown') }}{% endblock %}

{% block title %}{{ dataThisCharacter.name.full|default('Unknown') }}{% endblock %}

{% block body %}
    <main class="animeContainer">
        <div class="animeTopContainer">
            <div class="animeTopLeftContent">
                <figure>
                    <img src="{{ dataThisCharacter.image.large }}" alt="{{ dataThisCharacter.name.full|default('Unknown') }}" class="animeImage">
                </figure>
                {% if app.user and not characterIsInFavorites %}
                    <a href="{{ path('add_character_to_favorites_user', { idApi : dataThisCharacter.id }) }}" class="animeButtonAddTo favorites">Add to your favorites</a>
                {% elseif app.user and characterIsInFavorites and characterInDatabase %}
                    <a href="{{ path('remove_character_from_favorites_user', { id : characterInDatabase.id }) }}" class="animeButtonAddTo favorites">Remove from favorites</a>
                {% endif %}
            </div>
            <div class="animeTopRightContent">
                <h1 class="animeTitle">{{ dataThisCharacter.name.full|default('Unknown') }}</h1>
                <p class="animeSynopsisContent"><b>Age :</b> {{ dataThisCharacter.age|default('Unknown') }}</p>
                <p class="animeSynopsisContent"><b>Gender :</b> {{ dataThisCharacter.gender|default('Unknown') }}</p>
                {# Voir les différents contenu des description pour adapter l'affichage #}
                <p class="animeSynopsisContent">
                    {{ dataThisCharacter.description ? dataThisCharacter.description|raw|nl2br : "No description yet" }}
                </p>
            </div>
        </div>
        <div class="characterRemainingContainer">
            <h2 class="characterPartTitle">APPEARANCES</h2>
            <div class="homeMultipleAnimes autoFill">
            {% for anime in dataThisCharacter.media.edges %}
                <figure class="homeOneAnime">
                {% if anime.voiceActors %}
                    <a href="{{ path('show_staff', { 'id' :  anime.voiceActors[0].id }) }}" title="{{ anime.voiceActors[0].name.full }}"><img src="{{ anime.voiceActors[0].image.medium }}" alt="{{ anime.voiceActors[0].name.full }}" class="characterRemainingVoiceActorImage"></a>
                {% endif %}
                    <a href="{{ path('show_anime', { 'id' : anime.node.id }) }}" title="{{ anime.node.title.romaji|default('Unknown') }}">
                        <div class="homeOneAnimeImageInfo">
                            <img src="{{ anime.node.coverImage.large }}" alt="Cover Image of {{ anime.node.title.romaji|default('Unknown') }}" class="homeOneAnimeImage">
                        </div>
                    </a>
                    <figcaption class="homeOneAnimeTitle {{ app.user and app.user.darkMode ? 'dark' }}"><a href="{{ path('show_anime', { 'id' : anime.node.id }) }}" title="{{ anime.node.title.romaji|default('Unknown') }}">{{ anime.node.title.romaji|default('Unknown') }}</a></figcaption>
                </figure>
            {% endfor %}
            </div>
        </div>
    </main>
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    <script>
        // On sélectionne tout les textes de spoils
        const spoilerContentSpans = document.querySelectorAll('.spoilerContent');
        
        // Pour chaque spoil
        spoilerContentSpans.forEach(spoilerContent => {
            // On crée un span qui servira à afficher le texte spoil
            const spoilerButton = document.createElement('span');
            // On lui ajoute une classe
            spoilerButton.className = 'spoiler';
            // On lui ajoute du texte
            spoilerButton.textContent = '[SPOILER]';
            // Et on ajoute un écouteur d'évènement click sur celui-ci
            spoilerButton.addEventListener('click', () => {
                // On affiche/n'affiche pas le contenu spoil en fonction de chaque click
                spoilerContent.classList.toggle('visible');
            });
            // Le span créé sera placé avant le texte spoil qui lui correspond
            spoilerContent.parentNode.insertBefore(spoilerButton, spoilerContent);
        });
    </script>
{% endblock %}