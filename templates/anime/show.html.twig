{% extends 'base.html.twig' %}

{% macro textTimeAgo(date) %}
    {# Calcul de l'écart entre la date et maintenant (grâce au temps unix) #}
    {% set now = 'now'|date("U") %}
    {% set dateTime = date|date("U") %}
    {% set timeDifference = now - dateTime %}
    {% set years = (timeDifference / (365 * 24 * 60 * 60))|round(0, 'floor') %}
    {% set months = (timeDifference / (30 * 24 * 60 * 60))|round(0, 'floor') %}
    {% set weeks = (timeDifference / (7 * 24 * 60 * 60))|round(0, 'floor') %}
    {% set days = (timeDifference / (24 * 60 * 60))|round(0, 'floor') %}
    {% set hours = (timeDifference / (3600))|round(0, 'floor') %}
    {% set minutes = (timeDifference / 60)|round(0, 'floor') %}
    {# On crée un texte en fonction du temps manquant #}
    {% if years > 0 %}
        {{ years ~ ' year' ~ (years > 1 ? 's' : '') ~ ' ago' }}
    {% elseif months > 0 %}
        {{ months ~ ' month' ~ (months > 1 ? 's' : '') ~ ' ago' }}
    {% elseif weeks > 0 %}
        {{ weeks ~ ' week' ~ (weeks > 1 ? 's' : '') ~ ' ago' }}
    {% elseif days > 0 %}
        {{ days ~ ' day' ~ (days > 1 ? 's' : '') ~ ' ago' }}
    {% elseif hours > 0 %}
        {{ hours ~ ' hour' ~ (hours > 1 ? 's' : '') ~ ' ago' }}
    {% elseif minutes > 0 %}
        {{ minutes ~ ' minute' ~ (minutes > 1 ? 's' : '') ~ ' ago' }}
    {% else %}
        {{ 'just now' }}
    {% endif %}
{% endmacro %}

{# Permet de rendre la récuperation des données plus pratique #}
{% set dataThisAnime = dataOneAnime.data.Media %}

{% block meta_description %}{{ dataThisAnime.description ? dataThisAnime.description|raw|nl2br : dataThisAnime.title.romaji }}{% endblock %}

{% block title %}{{ dataThisAnime.title.romaji ? dataThisAnime.title.romaji : "?" }}{% endblock %}

{% block body %}
    <main class="animeContainer">
        <div class="animeTopContainer">
            <div class="animeTopLeftContent">
                <figure>
                    <img src="{{ dataThisAnime.coverImage.large }}" alt="Cover Image of {{ dataThisAnime.title.romaji|default('Unknown') }}" class="animeImage">
                </figure>
                {% if app.user and not animeIsInList %}
                    <a href="{{ path('add_anime_to_list_user', { idApi: dataThisAnime.id }) }}" class="animeButtonAddTo list" title="Add to your list">Add to your list</a>
                {% endif %}
                {% if app.user and not animeIsInFavorites %}
                    <a href="{{ path('add_anime_to_favorites_user', { idApi : dataThisAnime.id }) }}" class="animeButtonAddTo favorites" title="Add to your favorites">Add to your favorites</a>
                {% elseif app.user and animeIsInFavorites and animeInDatabase %}
                    <a href="{{ path('remove_anime_from_favorites_user', { id : animeInDatabase.id }) }}" class="animeButtonAddTo favorites" title="Remove from favorites">Remove from favorites</a>
                {% endif %}
            </div>
            <div class="animeTopRightContent">
                <h1 class="animeTitle">{{ dataThisAnime.title.romaji|default('Unknown') }}</h1>
                <h2 class="animeSynopsisTitle"><i>Synopsis</i></h2>
                <p class="animeSynopsisContent">{{ dataThisAnime.description ? dataThisAnime.description|raw|nl2br : '<i>No synopsis yet</i>' }}</p>
                <button class="animeSynopsisShowMoreButton profileInfosButton settings fit">Show More</button>
            </div>
        </div>
        <div class="animeRemainingContainer">
            <div class="animeRemainingLeftContent">
                <section class="animeRemainingLeftContentInfo">
                    <h2 class="animeRemainingLeftContentInfoTitle"><i>Format</i></h2>
                    <p class="animeRemainingLeftContentInfoContent">{{ dataThisAnime.format ? dataThisAnime.format|title|replace({'_' : ' '}) : '<i>TBA</i>' }}</p>
                </section>
                <section class="animeRemainingLeftContentInfo">
                    <h2 class="animeRemainingLeftContentInfoTitle"><i>Status</i></h2>
                    <p class="animeRemainingLeftContentInfoContent">{{ dataThisAnime.status ? dataThisAnime.status|title|replace({'_' : ' '}) }}</p>
                </section>
                <section class="animeRemainingLeftContentInfo">
                    <h2 class="animeRemainingLeftContentInfoTitle">{{ dataThisAnime.startDate == dataThisAnime.endDate ? '<i>Airing Date</i>' : '<i>Airing Dates</i>' }}</h2>
                    <div class="animeRemainingLeftContentInfoContentContainer">
                    {# Différentes vérifications par rapport aux dates d'un animé, on est obligés de vérifier l'année, le mois et le jour pour adapter l'affichage #}
                    {# Cas pas de date de début et de fin #}
                    {% if dataThisAnime.startDate.year == null and dataThisAnime.startDate.month == null and dataThisAnime.startDate.day == null and dataThisAnime.endDate.year == null and dataThisAnime.endDate.month == null and dataThisAnime.endDate.day == null %}
                        <p class="animeRemainingLeftContentInfoContent">TBA</p>
                    {# Cas date de début = date de fin (pour les films par exemple) #}
                    {% elseif dataThisAnime.startDate.year == dataThisAnime.endDate.year and dataThisAnime.startDate.month == dataThisAnime.endDate.month and dataThisAnime.startDate.day == dataThisAnime.endDate.day %}
                        <p class="animeRemainingLeftContentInfoContent">
                            {{ dataThisAnime.startDate.month ? (dataThisAnime.startDate.month < 10 ? '0' : '' ) ~ dataThisAnime.startDate.month ~ '/' : '' }}{{ dataThisAnime.startDate.day ? (dataThisAnime.startDate.day < 10 ? '0' : '') ~ dataThisAnime.startDate.day ~ '/' : '' }}{{ dataThisAnime.startDate.year ? dataThisAnime.startDate.year : '' }}
                        </p>
                    {% else %}
                    {# Sinon, il y a au moins une date donc on affiche la date de début et de fin #}
                        {# Cas où il n'y a pas de date de début #}
                        {% if dataThisAnime.startDate.day == null and dataThisAnime.startDate.month == null and dataThisAnime.startDate.year == null %}
                            <p class="animeRemainingLeftContentInfoContent"><i>TBA</i>&nbsp;</p>
                        {# Cas où il y a une date de début #}
                        {% else %}
                            <p class="animeRemainingLeftContentInfoContent">
                                {{ dataThisAnime.startDate.month ? (dataThisAnime.startDate.month < 10 ? '0' : '') ~ dataThisAnime.startDate.month ~ '/' : '' }}{{ dataThisAnime.startDate.day ? (dataThisAnime.startDate.day < 10 ? '0' : '') ~ dataThisAnime.startDate.day ~ '/' : '' }}{{ dataThisAnime.startDate.year ? dataThisAnime.startDate.year : '' }}&nbsp;
                            </p>
                        {% endif %}
                        {# Séparation des dates de début et de fin #}
                        <p class="animeRemainingLeftContentInfoContent">to&nbsp;</p>
                        {# Cas où il n'y a pas de date de fin #}
                        {% if dataThisAnime.endDate.day == null and dataThisAnime.endDate.month == null and dataThisAnime.endDate.year == null %}
                            <p class="animeRemainingLeftContentInfoContent"><i>TBA</i></p>
                        {# Cas où il y a une date de fin #}
                        {% else %}
                            <p class="animeRemainingLeftContentInfoContent">
                                {{ dataThisAnime.endDate.month ? (dataThisAnime.endDate.month < 10 ? '0' : '') ~ dataThisAnime.endDate.month ~ '/' : '' }}{{ dataThisAnime.endDate.day ? (dataThisAnime.endDate.day < 10 ? '0' : '') ~ dataThisAnime.endDate.day ~ '/' : '' }}{{ dataThisAnime.endDate.year ? dataThisAnime.endDate.year : '' }}
                            </p>
                        {% endif %}
                    {% endif %}
                    </div>
                </section>
                <section class="animeRemainingLeftContentInfo">
                    <h2 class="animeRemainingLeftContentInfoTitle"><i>Season</i></h2>
                    {% if dataThisAnime.season and dataThisAnime.seasonYear %}
                        <p class="animeRemainingLeftContentInfoContent season">{{ dataThisAnime.season|title }} {{ dataThisAnime.seasonYear }}</p>
                    {% else %}
                        <p class="animeRemainingLeftContentInfoContent"><i>TBA</i></p>
                    {% endif %}
                </section>
                <section class="animeRemainingLeftContentInfo">
                    <h2 class="animeRemainingLeftContentInfoTitle"><i>Episodes</i></h2>
                    <p class="animeRemainingLeftContentInfoContent">{{ dataThisAnime.episodes ? dataThisAnime.episodes : '<i>TBA</i>' }}</p>
                </section>
                <section class="animeRemainingLeftContentInfo">
                    <h2 class="animeRemainingLeftContentInfoTitle"><i>Episode Duration</i></h2>
                    {# On effectue la conversion de minutes en heures si nécessaires et adaptations de l'affichage en fonction de cela #}
                    {% if dataThisAnime.duration %}
                        {% set duration = dataThisAnime.duration %}
                        {% if duration >= 60 %}
                            {% set hours = duration // 60 %}
                            {% set minutes = duration % 60 %}
                            {% set hoursText = hours > 1 ? 'hours' : 'hour' %}
                            {% set minText = minutes > 1 ? 'mins' : 'min' %}
                            <p class="animeRemainingLeftContentInfoContent">{{ hours }} {{ hoursText }} {{ minutes }} {{ minText }}</p>
                        {% else %}
                            <p class="animeRemainingLeftContentInfoContent">{{ duration > 1 ? duration ~ ' mins' : duration ~ ' min' }}</p>
                        {% endif %}
                    {% else %}
                        <p class="animeRemainingLeftContentInfoContent"><i>TBA</i></p>
                    {% endif %}
                </section>
                <section class="animeRemainingLeftContentInfo">
                    <h2 class="animeRemainingLeftContentInfoTitle"><i>Source</i></h2>
                    {# Si il y a une source, on affiche de telle manière à ce que les underscores soient replacés par un espace et que chaque mot ait une majuscule au début ce celui-ci #}
                    <p class="animeRemainingLeftContentInfoContent">{{ dataThisAnime.source ? dataThisAnime.source|title|replace({'_' : ' '}) : '<i>TBA</i>' }}</p>
                </section>
                <section class="animeRemainingLeftContentInfo">
                    <h2 class="animeRemainingLeftContentInfoTitle"><i>Genres</i></h2>
                    <div class="animeRemainingLeftContentInfoContentContainer">
                    {% if dataThisAnime.genres %}
                        {% for genre in dataThisAnime.genres %}
                            <p class="animeRemainingLeftContentInfoContent">{{ genre|capitalize }}&nbsp;</p>
                        {% endfor %}
                    {% else %}
                    <p class="animeRemainingLeftContentInfoContent"><i>None</i></p>
                    {% endif %}
                    </div>
                </section>
                <section class="animeRemainingLeftContentInfo">
                    <h2 class="animeRemainingLeftContentInfoTitle"><i>Studio</i></h2>
                    <div class="animeRemainingLeftContentInfoContentContainer">
                        {# Un animé a souvent 1 seul studio d'animation, mais il peut en avoir plusieurs, donc on prends cela en compte pour les mettre dans un tableau #}
                        {% if dataThisAnime.studios %}
                            {# On crée un tableau pour stocker les studios principaux #}
                            {% set mainStudios = [] %}
                            {% for studio in dataThisAnime.studios.edges %}
                                {# Si le studio est principal #}
                                {% if studio.isMain %}
                                    {# On le fusionne avec le tableau #}
                                    {% set mainStudios = mainStudios|merge([studio.node.name]) %}
                                {% endif %}
                            {% endfor %}
                            {# On affiche les studios principaux #}
                            {% for mainStudio in mainStudios %}
                                <p class="animeRemainingLeftContentInfoContent">{{ mainStudio }}&nbsp;</p>
                            {% endfor %}
                        {% else %}
                            <p class="animeRemainingLeftContentInfoContent"><i>TBA</i></p>
                        {% endif %}
                    </div>
                </section>
                <section class="animeRemainingLeftContentInfo">
                    <h2 class="animeRemainingLeftContentInfoTitle"><i>Producers</i></h2>
                    <div class="animeRemainingLeftContentInfoContentContainer">
                        {# Les studios qui ne sont pas principaux sont des producteurs #}
                        {% if dataThisAnime.studios %}
                            {# On crée un tableau pour stocker les studios producteurs #}
                            {% set producers = [] %}
                            {% for studio in dataThisAnime.studios.edges %}
                                {# Si le studio n'est pas principal #}
                                {% if studio.isMain == false %}
                                    {# On le fusionne avec le tableau #}
                                    {% set producers = producers|merge([studio.node.name]) %}
                                {% endif %}
                            {% endfor %}
                            {% for producer in producers %}
                                <p class="animeRemainingLeftContentInfoContent">{{ producer|capitalize }}&nbsp;</p>
                            {% endfor %}
                        {% else %}
                            <p class="animeRemainingLeftContentInfoContent"><i>TBA</i></p>
                        {% endif %}
                    </div>
                </section>
            </div>
            <div class="animeRemainingRightContent">
            {# Si il y a un prochain episode prévu, on affiche le temps qu'il manque avant celui-ci #}
            {% if dataThisAnime.nextAiringEpisode %}
                {% set episodeNumber = dataThisAnime.nextAiringEpisode.episode %}
                {% set airingAt = dataThisAnime.nextAiringEpisode.airingAt %}
                {% set totalSeconds = dataThisAnime.nextAiringEpisode.timeUntilAiring %}

                {# Calcul des jours, heures et minutes avant le prochain épisode #}
                {% set days = totalSeconds // 86400 %}
                {% set hours = (totalSeconds % 86400) // 3600 %}
                {% set minutes = ((totalSeconds % 86400) % 3600) // 60 %}

                {# Adapation de l'affichage de chaque données en fonction de celles-ci #}
                {# Pour le numéro du prochain épsiode #}
                {% set episodeText = episodeNumber ? ' (episode ' ~ episodeNumber ~ ') ' : ' ' %}

                {# Pour les jours manquant #}
                {% set daysText = days > 1 ? days ~ ' days ' : days ~ ' day ' %}

                {# Pour les heures manquantes #}
                {% set hoursText = hours > 1 ? hours ~ ' hours ' : hours ~ ' hour ' %}

                {# Pour les minutes manquantes #}
                {% set minText = minutes > 1 ? minutes ~ ' mins' : minutes ~ ' min' %}

                {# On récupère la date et l'heure de sortie de l'épisode #}
                {% set UTCDate = airingAt|date('D, d M Y,  H:i', 'UTC') %}
                <h2 class="animeRemainingRightContentTimeBeforeEpisode" title="{{ UTCDate ~ ' (UTC)' }}">
                    <i>Time before next episode{{ episodeText }}: {{ days >= 1 ? daysText : '' }}{{ hours >= 1 ? hoursText : "" }}{{ minutes >= 1 ? minText : "" }}</i>
                </h2>
            {% endif %}
            {% if dataThisAnime.characters.edges %}
                <div class="animeRemainingRightContentPartTitleContainer">
                    <h2 class="animeRemainingRightContentPartTitle">Characters</h2>
                    <a href="{{ path('characters_anime', { 'id' : dataThisAnime.id }) }}" class="animeRemainingRightContentPartMore" title="View more">View more</a>
                </div>
                <div class="animeRemainingRightContentPartCardsContainer">
                {% for character in dataThisAnime.characters.edges|slice(0, 8) %}
                    <a href="{{ path('show_character', { 'id' : character.node.id }) }}" class="animeRemainingRightContentPartCardsContent" title="{{ character.node.name.full|default('Unknown') }}">
                        <figure>
                            <img src="{{ character.node.image.medium }}" alt="{{ character.node.name.full|default('Image of the character') }}" class="animeRemainingRightContentPartCardsImage">
                        </figure>
                        <div class="animeRemainingRightContentPartCardsTextContainer">
                            <h3 class="animeRemainingRightContentPartCardsTop">{{ character.node.name.full|default('Unknown') }}</h3>
                            <p class="animeRemainingRightContentPartCardsBottom"><i>{{ character.role ? character.role|title : 'Unknown' }}</i></p>
                        </div>
                    </a>
                {% endfor %}
                </div>
            {% endif %}
            {% if dataThisAnime.staff.edges %}
                <div class="animeRemainingRightContentPartTitleContainer">
                    <h2 class="animeRemainingRightContentPartTitle">Staff</h2>
                    <a href="{{ path('staff_anime', { 'id' : dataThisAnime.id }) }}" class="animeRemainingRightContentPartMore" title="View more">View more</a>
                </div>
                <div class="animeRemainingRightContentPartCardsContainer">
                {% for staff in dataThisAnime.staff.edges|slice(0, 8) %}
                    <a href="{{ path('show_staff', { 'id' : staff.node.id }) }}" class="animeRemainingRightContentPartCardsContent" title="{{ staff.node.name.full|default('Unknown') }}">
                        <figure>
                            <img src="{{ staff.node.image.medium }}" alt="{{ staff.node.name.full|default('Image of the staff member') }}" class="animeRemainingRightContentPartCardsImage">
                        </figure>
                        <div class="animeRemainingRightContentPartCardsTextContainer">
                            <h3 class="animeRemainingRightContentPartCardsTop">{{ staff.node.name.full|default('Unknown') }}</h3>
                            <p class="animeRemainingRightContentPartCardsBottom"><i>{{ staff.role|default('Unknown') }}</i></p>
                        </div>
                    </a>
                {% endfor %}
                </div>
            {% endif %}
            {% if userPost %}
                <h2 class="animeRemainingRightContentPartTitle">Your opinion about it!</h2>
                <div class="animeRemainingRightContentPartOpinionsContainer">
                    <div class="onePostContainer">
                        <div class="onePostTopContainer">
                            <figure class="oneTalkUserContainer">
                                {% if userPost.user %}
                                    <img src="{{ userPost.user.profilePicture ? asset('uploads/' ~ userPost.user.profilePicture) : asset('uploads/baseUser.png') }}" alt="User {{ userPost.user.username }} profile picture" class="oneTalkUserImage">
                                {% else %}
                                    <img src="{{ asset('uploads/baseUser.png') }}" alt="Deleted user profile picture" class="oneTalkUserImage">
                                {% endif %}
                                <figcaption class="oneTalkUsername post">
                                    {% if userPost.user %}
                                        <a href="{{ path('show_user', { id: userPost.user.id }) }}">{{ userPost.user.username }}</a>
                                    {% else %}
                                        <p>Deleted user</p>
                                    {% endif %}
                                </figcaption>
                            </figure>
                            {# Appel de la macro (fonction) pour l'affichage de la différence de temps entre la création du post et maintenant #}
                            {% set textPublication = _self.textTimeAgo(userPost.creationDate) %}
                            <div class="oneTalkTopRightContainer">
                                <p class="oneTalkUserTime post" title="{{ userPost.creationDate|date('D, d M Y,  H:i', 'UTC') }} (UTC)"><i>Created {{ textPublication }}</i></p>
                                <div class="oneTalkTopRightBottomLine">
                                    {# Si le post appartient à l'utilisateur et n'est pas verrouillé, il pourra le modifier #}
                                    {% if userPost.user == app.user and not discussion.locked and userPost.user %}
                                        <a href="{{ path('edit_post', { discussion_id: discussion.id, id: userPost.id }) }}" class="settingsChangePseudo" title="Edit this post"><i class="fa-solid fa-pen-to-square"></i></a>            
                                    {% endif %}
                                    {# Si le post appartient à l'utilisateur et n'est pas verrouiller, ou si l'utilisateur est un admin, le peut être supprimer #}
                                    {% if (userPost.user == app.user and not discussion.locked) or is_granted('ROLE_ADMIN') %}
                                        {% if app.user %}
                                            <a href="{{ path('delete_post', { discussion_id: discussion.id, id: userPost.id }) }}" class="talkDeleteLink" title="Delete this post"><i class="fa-solid fa-trash-can"></i></a>
                                        {% endif %}
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        <p class="animeRemainingRightContentPartOpinionsMidContent">{{ userPost.content }}</p>
                        <div class="onePostBottomContainer">
                        {% if userPost.creationDate != userPost.lastModifiedDate %}
                            {# Appel de la macro (fonction) pour l'affichage de la différence de temps entre la dernière modification du post et maintenant #}
                            {% set textModified = _self.textTimeAgo(userPost.lastModifiedDate) %}
                            <p class="oneTalkUserTime post bottom" title="{{ userPost.lastModifiedDate|date('D, d M Y,  H:i', 'UTC') }} (UTC)"><i>Modified {{ textModified }}</i></p>
                        {% endif %}
                        {% if userPost.user %}
                            {% if app.user %}
                                {# Si le post est liké par l'utilisateur #}
                                {% if userPost.users.contains(app.user) %}
                                    <a href="{{ path('unlike_post', { discussion_id: discussion.id, id: userPost.id, redirect: 'anime' }) }}" class="onePostLikes" title="Unlike this post"><i class="fa-solid fa-heart"></i> <span class="onePostLikesNumber">{{ userPost.users|length }}</span></a>
                                {% else %}
                                    <a href="{{ path('like_post', { discussion_id: discussion.id, id: userPost.id, redirect: 'anime' }) }}" class="onePostLikes" title="Like this post"><i class="fa-regular fa-heart"></i> <span class="onePostLikesNumber">{{ userPost.users|length }}</span></a>
                                {% endif %}
                            {% else %}
                                <p class="onePostLikes" title="Log in to like this post"><i class="fa-regular fa-heart"></i> <span class="onePostLikesNumber">{{ userPost.users|length }}</span></p>
                            {% endif %}
                        {% endif %}
                        </div>
                    </div>
                </div>
            {% endif %}
            {% if discussion %}
                {% if not userPost %}
                    <h2 class="animeRemainingRightContentPartTitle">Here's what people think about it! <a href={{ path('post_about_anime', { id: dataThisAnime.id }) }} class="profileInfosButton addPost">Post</a> <a href={{ path('show_opinion_anime', { id: dataThisAnime.id }) }} class="profileInfosButton addPost">All Opinions</a></h2>
                {% else %}
                    <h2 class="animeRemainingRightContentPartTitle">Here's what people think about it! <a href={{ path('show_opinion_anime', { id: dataThisAnime.id }) }} class="profileInfosButton addPost">All Opinions</a></h2>
                {% endif %}
            {% else %}
                <p class="animeRemainingRightContentPartTitle">Start giving your opinion! <a href={{ path('post_about_anime', { id: dataThisAnime.id }) }} class="profileInfosButton addPost">Post</a></p>
            {% endif %}
                <div class="animeRemainingRightContentPartOpinionsContainer" id="posts-container">
                {% if discussion %}
                    {% for post in discussion.posts %}
                        <div class="onePostContainer" data-likes="{{ post.users|length }}">
                            <div class="onePostTopContainer">
                                <figure class="oneTalkUserContainer">
                                    {% if post.user %}
                                        <img src="{{ post.user.profilePicture ? asset('uploads/' ~ post.user.profilePicture) : asset('uploads/baseUser.png') }}" alt="User {{ post.user.username }} profile picture" class="oneTalkUserImage">
                                    {% else %}
                                        <img src="{{ asset('uploads/baseUser.png') }}" alt="Deleted user profile picture" class="oneTalkUserImage">
                                    {% endif %}
                                    <figcaption class="oneTalkUsername post">
                                        {% if post.user %}
                                            <a href="{{ path('show_user', { id: post.user.id }) }}">{{ post.user.username }}</a>
                                        {% else %}
                                            <p>Deleted user</p>
                                        {% endif %}
                                    </figcaption>
                                </figure>
                                {# Appel de la macro (fonction) pour l'affichage de la différence de temps entre la création du post et maintenant #}
                                {% set textPublication = _self.textTimeAgo(post.creationDate) %}
                                <div class="oneTalkTopRightContainer">
                                    <p class="oneTalkUserTime post" title="{{ post.creationDate|date('D, d M Y,  H:i', 'UTC') }} (UTC)"><i>Created {{ textPublication }}</i></p>
                                    <div class="oneTalkTopRightBottomLine">
                                        {# Si le post appartient à l'utilisateur et n'est pas verrouillé, il pourra le modifier #}
                                        {% if post.user == app.user and not discussion.locked and post.user %}
                                            <a href="{{ path('edit_post', { discussion_id: discussion.id, id: post.id }) }}" class="settingsChangePseudo" title="Edit this post"><i class="fa-solid fa-pen-to-square"></i></a>            
                                        {% endif %}
                                        {# Si le post appartient à l'utilisateur et n'est pas verrouiller, ou si l'utilisateur est un admin, le peut être supprimer #}
                                        {% if (post.user == app.user and not discussion.locked) or is_granted('ROLE_ADMIN') %}
                                            {% if app.user %}
                                                <a href="{{ path('delete_post', { discussion_id: discussion.id, id: post.id }) }}" class="talkDeleteLink" title="Delete this post"><i class="fa-solid fa-trash-can"></i></a>
                                            {% endif %}
                                        {% endif %}
                                    </div>
                                </div>
                            </div>
                            <p class="animeRemainingRightContentPartOpinionsMidContent">{{ post.content }}</p>
                            <div class="onePostBottomContainer">
                            {% if post.creationDate != post.lastModifiedDate %}
                                {# Appel de la macro (fonction) pour l'affichage de la différence de temps entre la dernière modification du post et maintenant #}
                                {% set textModified = _self.textTimeAgo(post.lastModifiedDate) %}
                                <p class="oneTalkUserTime post bottom" title="{{ post.lastModifiedDate|date('D, d M Y,  H:i', 'UTC') }} (UTC)"><i>Modified {{ textModified }}</i></p>
                            {% endif %}
                            {% if post.user %}
                                {% if app.user %}
                                    {# Si le post est liké par l'utilisateur #}
                                    {% if post.users.contains(app.user) %}
                                        <a href="{{ path('unlike_post', { discussion_id: discussion.id, id: post.id, redirect: 'anime' }) }}" class="onePostLikes" title="Unlike this post"><i class="fa-solid fa-heart"></i> <span class="onePostLikesNumber">{{ post.users|length }}</span></a>
                                    {% else %}
                                        <a href="{{ path('like_post', { discussion_id: discussion.id, id: post.id, redirect: 'anime' }) }}" class="onePostLikes" title="Like this post"><i class="fa-regular fa-heart"></i> <span class="onePostLikesNumber">{{ post.users|length }}</span></a>
                                    {% endif %}
                                {% else %}
                                    <p class="onePostLikes" title="Log in to like this post"><i class="fa-regular fa-heart"></i> <span class="onePostLikesNumber">{{ post.users|length }}</span></p>
                                {% endif %}
                            {% endif %}
                            </div>
                        </div>
                    {% endfor %}
                {% endif %}
                </div>
            </div>
        </div>
    </main>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        // Ajout de l'écoute d'événements au chargement de la page
        document.addEventListener('DOMContentLoaded', () => {
            // Séléction du container des détails d'un anime, du bouton pour montrer plus et le contenu de montrer plus
            const contentContainer = document.querySelector('.animeTopRightContent');
            const showMoreButton = document.querySelector('.animeSynopsisShowMoreButton');
            const synopsisContent = document.querySelector('.animeSynopsisContent');

            // Vérification si le contenu dépasse la hauteur maximale
            if(synopsisContent.scrollHeight <= synopsisContent.clientHeight){
                // Disparition du bouton
                showMoreButton.style.display = 'none';
            }
            
            // Ajout de l'écoute du click sur le bouton montrer plus
            showMoreButton.addEventListener('click', () => {
                // On ajoute la classe pour montrer plus
                contentContainer.classList.toggle('expanded');
                if(contentContainer.classList.contains('expanded')){
                    showMoreButton.textContent = 'Show Less';
                }
                else{
                    showMoreButton.textContent = 'Show More';
                }
            });

            // Récupération du conteneur des posts et les posts sous forme de tableau
            let postsContainer = document.getElementById('posts-container');
            let posts = Array.from(postsContainer.getElementsByClassName('onePostContainer'));

            // Tri des posts par nombre de likes
            posts.sort((a, b) => {
                return parseInt(b.dataset.likes) - parseInt(a.dataset.likes);
            });

            // Reécriture du conteneur et ajout des posts triés
            postsContainer.innerHTML = '';
            posts.slice(0, 3).forEach(post => {
                postsContainer.appendChild(post);
            });
        });
    </script>
{% endblock %}