{% extends 'base.html.twig' %}

{% block meta_description %}Look what anime there is in {{ user.username }}'s anime list!{% endblock %}

{% block title %}{{ user.username }}'s Anime List{% endblock %}

{% block body %}
    <main>
        <h1 class="title {{ app.user and app.user.darkMode ? 'dark' }}">{{ user.username }}'s Anime List</h1>
        <div class="animeListButtonsContainer">
            <button class="animeListButton active {{ app.user and app.user.darkMode ? 'dark' }}" id="animeListButtonAll" title="All">ALL</button>
            <button class="animeListButton {{ app.user and app.user.darkMode ? 'dark' }}" id="animeListButtonWatching" title="Watching">WATCHING</button>
            <button class="animeListButton {{ app.user and app.user.darkMode ? 'dark' }}" id="animeListButtonCompleted" title="Completed">COMPLETED</button>
            <button class="animeListButton {{ app.user and app.user.darkMode ? 'dark' }}" id="animeListButtonPlanned" title="Planned to Watch">PLANNED TO WATCH</button>
        </div>
        <div class="animeListContainer {{ app.user and app.user.darkMode ? 'dark' }}">
            {% for key, anime in animesDataByState["Watching"] %}
            {# La classe ci-dessous sert uniquement pour le JavaScript #}
            <figure class="animeListWatching">
                {% if app.user == user %}
                    <a href="{{ path('change_anime_list_user', { id: key }) }}" title="Modify Anime"><i class="fa-solid fa-bars animeMenu {{ app.user and app.user.darkMode ? 'dark' }}"></i></a>
                {% endif %}
                <div class="animeEpisodesWatchedContainer">
                    {% if app.user == user %}
                        <a href="{{ path('remove_episode_anime_list_user', { id : key }) }}" title="Remove Episode"><i class="fa-solid fa-minus animeEpisodesWatchedControl minus {{ app.user and app.user.darkMode ? 'dark' }}"></i></a>
                    {% endif %}
                    <p class="animeEpisodesWatched {{ app.user and app.user.darkMode ? 'dark' }}">{{ anime.episodesWatched }}/{{ anime.episodes|default('?') }}</p>
                    {% if app.user == user %}
                        <a href="{{ path('add_episode_anime_list_user', { id : key }) }}" title="Add Episode"><i class="fa-solid fa-plus animeEpisodesWatchedControl plus {{ app.user and app.user.darkMode ? 'dark' }}"></i></a>
                    {% endif %}
                </div>
                <img src="{{ anime.coverImage.large }}" alt="Cover image of {{ anime.title.romaji|default('Unknown') }}" class="animeListAnimeImage">
                <figcaption class="homeOneAnimeTitle {{ app.user and app.user.darkMode ? 'dark' }}"><a href="{{ path('show_anime', { id : anime.id }) }}" title="{{ anime.title.romaji|default('Unknown') }}">{{ anime.title.romaji|default('Unknown') }}</a></figcaption>
            </figure>
            {% endfor %}
            {% for key, anime in animesDataByState["Completed"] %}
            {# La classe ci-dessous sert uniquement pour le JavaScript #}
            <figure class="animeListCompleted">
                {% if app.user == user %}
                    <a href="{{ path('change_anime_list_user', { id: key }) }}" title="Modify Anime"><i class="fa-solid fa-bars animeMenu {{ app.user and app.user.darkMode ? 'dark' }}"></i></a>
                {% endif %}
                <img src="{{ anime.coverImage.large }}" alt="Cover image of {{ anime.title.romaji|default('Unknown') }}" class="animeListAnimeImage">
                <figcaption class="homeOneAnimeTitle {{ app.user and app.user.darkMode ? 'dark' }}"><a href="{{ path('show_anime', { id : anime.id }) }}" title="{{ anime.title.romaji|default('Unknown') }}">{{ anime.title.romaji|default('Unknown') }}</a></figcaption>
            </figure>
            {% endfor %}
            {% for key, anime in animesDataByState["Plan to watch"] %}
            {# La classe ci-dessous sert uniquement pour le JavaScript #}
            <figure class="animeListPlanned" >
                {% if app.user == user %}
                    <a href="{{ path('change_anime_list_user', { id: key }) }}" title="Modify Anime"><i class="fa-solid fa-bars animeMenu {{ app.user and app.user.darkMode ? 'dark' }}"></i></a>                    
                {% endif %}
                <img src="{{ anime.coverImage.large }}" alt="Cover image of {{ anime.title.romaji|default('Unknown') }}" class="animeListAnimeImage">
                <figcaption class="homeOneAnimeTitle {{ app.user and app.user.darkMode ? 'dark' }}"><a href="{{ path('show_anime', { id : anime.id }) }}" title="{{ anime.title.romaji|default('Unknown') }}">{{ anime.title.romaji|default('Unknown') }}</a></figcaption>
            </figure>
            {% endfor %}
        </div>
    </main>

    {% block javascripts %}
        {{ parent() }}

        <script>
            // Récupération des boutons de la page de la liste d'animé
            const buttons = document.querySelectorAll(".animeListButton");

            // Récupération des boutons de manière distinctives
            const animeListButtonAll = document.getElementById("animeListButtonAll");
            const animeListButtonWatching = document.getElementById("animeListButtonWatching");
            const animeListButtonCompleted = document.getElementById("animeListButtonCompleted");
            const animeListButtonPlanned = document.getElementById("animeListButtonPlanned");

            // Récupération des animés de manières distinctives
            const animesWatching = document.querySelectorAll(".animeListWatching");
            const animesCompleted = document.querySelectorAll(".animeListCompleted");
            const animesPlanned = document.querySelectorAll(".animeListPlanned");


            // Fonction qui gère les animés à afficher
            function showAnimes(selectedStatus){
                // On récupère les animés avec différents status
                const allAnimes = [animesWatching, animesCompleted, animesPlanned];

                // On n'affiche plus d'animé
                allAnimes.forEach(status => {
                    status.forEach(anime => {
                        anime.style.display = "none";
                    });
                });
                // Pour pouvoir afficher ceux demandées
                selectedStatus.forEach(anime => {
                    anime.style.display = "block";
                })
            }

            // Pour chaque bouton
            buttons.forEach((button) => {
                // Quand un des boutons est cliqué
                button.addEventListener("click", () => {
                    // On enlève la classe active à tout les boutons
                    buttons.forEach((btn) => {
                        btn.classList.remove("active");
                    });
                    // Pour ajouter la classe active au bouton cliqué
                    button.classList.add("active");

                    // On affiche les animés demandées
                    if(button === animeListButtonAll){
                        // Affichage de tout les animés
                        showAnimes([...animesWatching, ...animesCompleted, ...animesPlanned]);
                    }
                    else if(button === animeListButtonWatching){
                        // Affichage des animés en cours de visionnage
                        showAnimes(animesWatching);
                    }
                    else if(button === animeListButtonCompleted){
                        // Affichage des animés compléter
                        showAnimes(animesCompleted);
                    }
                    else if (button === animeListButtonPlanned){
                        // Affichage des animé qui sont prévus d'être visionner
                        showAnimes(animesPlanned);
                    }
                });
            });

            // On affiche de base tout les animés
            showAnimes([...animesWatching, ...animesCompleted, ...animesPlanned]);
        </script>
    {% endblock %}
{% endblock %}