{% extends 'base.html.twig' %}

{% macro textTimeAgo(date) %}
    {# Calcul de l'écart entre la date et maintenant (grâce au temps unix) #}
    {% set now = 'now'|date("U") %}
    {% set dateTime = date|date("U") %}
    {% set timeDifference = now - dateTime %}
    {% set years = (timeDifference / (365 * 24 * 60 * 60))|round(0, 'floor') %}
    {% set months = (timeDifference / (30 * 24 * 60 * 60))|round(0, 'floor') %}
    {% set weeks = (timeDifference / (7 * 24 * 60 * 60))|round(0, 'floor') %}
    {% set days = (timeDifference / (24 * 60 * 60))|round(0, 'floor') %}
    {% set hours = (timeDifference / (3600))|round(0, 'floor') %}
    {% set minutes = (timeDifference / 60)|round(0, 'floor') %}
    {# On crée un texte en fonction du temps manquant #}
    {% if years > 0 %}
        {{ years ~ ' year' ~ (years > 1 ? 's' : '') ~ ' ago' }}
    {% elseif months > 0 %}
        {{ months ~ ' month' ~ (months > 1 ? 's' : '') ~ ' ago' }}
    {% elseif weeks > 0 %}
        {{ weeks ~ ' week' ~ (weeks > 1 ? 's' : '') ~ ' ago' }}
    {% elseif days > 0 %}
        {{ days ~ ' day' ~ (days > 1 ? 's' : '') ~ ' ago' }}
    {% elseif hours > 0 %}
        {{ hours ~ ' hour' ~ (hours > 1 ? 's' : '') ~ ' ago' }}
    {% elseif minutes > 0 %}
        {{ minutes ~ ' minute' ~ (minutes > 1 ? 's' : '') ~ ' ago' }}
    {% else %}
        {{ 'just now' }}
    {% endif %}
{% endmacro %}

{% block meta_description %}Find out what people are talking about right now!{% endblock %}

{% block title %}Talks{% endblock %}

{% block body %}
    <main>     
        <h1 class="title talks">All Talks</h1>
        {% if app.user %}
            <a href="{{ path('add_discussion') }}" class="profileInfosButton talks" title="Create Talk">Create Talk</a>
        {% endif %}
        <div class="filterForm">
            <div class="filterElementFormElement">
                <label for="sort-select">Sort by :</label>
                <select id="sort-select">
                    <option value="date_desc">Date (New > Old)</option>
                    <option value="date_asc">Date (Old > New)</option>
                    <option value="posts_desc">Number of Posts (Most)</option>
                    <option value="posts_asc">Number of Posts (Least)</option>
                    <option value="title_asc">Title (A > Z)</option>
                    <option value="title_desc">Title (Z > A)</option>
                </select>
            </div>
        </div>
        <div id="talks-container">
            {% for talk in talks %}
                <section class="talk-item" data-date="{{ talk.creationDate|date('U') }}" data-posts="{{ talk.posts|length }}" data-title="{{ talk.title }}">
                    <a href="{{ path('show_discussion', { id: talk.id }) }}" class="oneTalkContainer" title="{{ talk.title }}">
                        <div class="oneTalkPartContainer">
                            <h2 class="oneTalkTitle">{{ talk.title }}</h2>
                            <figure class="oneTalkUserContainer">
                                {% if talk.user %}
                                    <img src="{{ talk.user.profilePicture ? asset('uploads/' ~ talk.user.profilePicture) : asset('uploads/baseUser.png') }}" alt="User {{ talk.user.username|default('Deleted user') }} profile picture" class="oneTalkUserImage">
                                    <figcaption class="oneTalkUsername">{{ talk.user.username }}</figcaption>
                                {% else %}
                                    <img src="{{ asset('uploads/baseUser.png') }}" alt="Deleted user profile picture" class="oneTalkUserImage">
                                    <figcaption class="oneTalkUsername">Deleted User</figcaption>
                                {% endif %}
                            </figure>
                            {# Appel de la macro (fonction) pour l'affichage de la différence de temps entre la création de la discussion et maintenant #}
                            {% set textCreation = _self.textTimeAgo(talk.creationDate) %}
                            <p class="oneTalkUserTime" title="{{ talk.creationDate|date('D, d M Y,  H:i', 'UTC') }} (UTC)"><i>Created {{ textCreation }}</i></p>
                        </div>
                        <div class="oneTalkPartContainer">
                            <p class="oneTalkComments"><i class="fa-solid fa-comments"></i> {{ talk.posts|length }}</p>
                            {% set lastPost = talk.posts|last %}
                            <figure class="oneTalkUserContainer right">
                                {% if lastPost.user %}
                                    <img src="{{ lastPost.user.profilePicture ? asset('uploads/' ~ lastPost.user.profilePicture) : asset('uploads/baseUser.png') }}" alt="User {{ lastPost.user.username|default('Deleted User') }} profile picture" class="oneTalkUserImage small">
                                    <figcaption class="oneTalkUsername small">{{ lastPost.user.username }}</figcaption>
                                {% else %}
                                    <img src="{{ asset('uploads/baseUser.png') }}" alt="Deleted User profile picture" class="oneTalkUserImage small">
                                    <figcaption class="oneTalkUsername small">Deleted User</figcaption>
                                {% endif %}
                            </figure>
                            {# Appel de la macro (fonction) pour l'affichage de la différence de temps entre la publication du dernier post et maintenant #}
                            {% set textPublication = _self.textTimeAgo(lastPost.creationDate) %}
                            <p class="oneTalkUserTime small" title="{{ lastPost.creationDate|date('D, d M Y,  H:i', 'UTC') }} (UTC)"><i>Posted {{ textPublication }}</i></p>
                        </div>
                    </a>
                </section>
            {% endfor %}
        </div>
    </main>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        // Ajout d'un listener sur le changement de filtre
        document.getElementById('sort-select').addEventListener('change', function (){
            // On récupère la valeur du filtre
            let sortValue = this.value;
            // On recupère le conteneur des discussions
            let container = document.getElementById('talks-container');
            // On recupère les discussions sous forme de tableau
            let talks = Array.from(container.getElementsByClassName('talk-item'));

            // Tri des discussions
            talks.sort((a, b) => {
                if(sortValue === 'date_desc'){
                    return b.dataset.date - a.dataset.date;
                }
                else if(sortValue === 'date_asc'){
                    return a.dataset.date - b.dataset.date;
                }
                else if(sortValue === 'posts_desc'){
                    return b.dataset.posts - a.dataset.posts;
                }
                else if(sortValue === 'posts_asc'){
                    return a.dataset.posts - b.dataset.posts;
                }
                else if (sortValue === 'title_asc'){
                    return a.dataset.title.localeCompare(b.dataset.title);
                }
                else if (sortValue === 'title_desc'){
                    return b.dataset.title.localeCompare(a.dataset.title);
                }
            });
            
            // Reconstruction du conteneur des discussions avec les discussions triées
            talks.forEach(talk => container.appendChild(talk));
        });
    </script>
{% endblock %}