{% extends 'base.html.twig' %}

{% macro textTimeAgo(date) %}
    {# Calcul de l'écart entre la date et maintenant (grâce au temps unix) #}
    {% set now = 'now'|date("U") %}
    {% set dateTime = date|date("U") %}
    {% set timeDifference = now - dateTime %}
    {% set years = (timeDifference / (365 * 24 * 60 * 60))|round(0, 'floor') %}
    {% set months = (timeDifference / (30 * 24 * 60 * 60))|round(0, 'floor') %}
    {% set weeks = (timeDifference / (7 * 24 * 60 * 60))|round(0, 'floor') %}
    {% set days = (timeDifference / (24 * 60 * 60))|round(0, 'floor') %}
    {% set hours = (timeDifference / (3600))|round(0, 'floor') %}
    {% set minutes = (timeDifference / 60)|round(0, 'floor') %}
    {# On crée un texte en fonction du temps manquant #}
    {% if years > 0 %}
        {{ years ~ ' year' ~ (years > 1 ? 's' : '') ~ ' ago' }}
    {% elseif months > 0 %}
        {{ months ~ ' month' ~ (months > 1 ? 's' : '') ~ ' ago' }}
    {% elseif weeks > 0 %}
        {{ weeks ~ ' week' ~ (weeks > 1 ? 's' : '') ~ ' ago' }}
    {% elseif days > 0 %}
        {{ days ~ ' day' ~ (days > 1 ? 's' : '') ~ ' ago' }}
    {% elseif hours > 0 %}
        {{ hours ~ ' hour' ~ (hours > 1 ? 's' : '') ~ ' ago' }}
    {% elseif minutes > 0 %}
        {{ minutes ~ ' minute' ~ (minutes > 1 ? 's' : '') ~ ' ago' }}
    {% else %}
        {{ 'just now' }}
    {% endif %}
{% endmacro %}

{% block meta_description %}Find out what people think about this topic : {{ talk.title }}{% endblock %}

{% block title %}{{ talk.title }}{% endblock %}

{% block body %}
    <main class="talkContainer">
        <h1 class="title talks">
            {{ talk.title }}
            {# Si la discussion appartient à l'utilisateur et n'est pas verrouillé, il pourra la modifier #}
            {% if talk.user == app.user and not talk.locked and app.user %}
                <a href="{{ path('edit_discussion', { id: talk.id }) }}" class="settingsChangePseudo" title="Edit this talk"><i class="fa-solid fa-pen-to-square"></i></a>            
            {% endif %}
            {# Si l'utilisateur est un admin et la discussion est verrouillé, il pourra déverrouiller celle-ci #}
            {# Si l'utilisateur est un admin et la discussion n'est pas verrouillé, il pourra verrouiller celle-ci #}
            {% if is_granted('ROLE_ADMIN') and talk.locked %}
                <a href="{{ path('unlock_discussion', { id: talk.id }) }}" title="Unlock this talk" class="settingsChangePseudo"><i class="fa-solid fa-lock"></i></a>
            {% elseif is_granted('ROLE_ADMIN') and not talk.locked %}
                <a href="{{ path('lock_discussion', { id: talk.id }) }}" title="Lock this talk" class="settingsChangePseudo"><i class="fa-solid fa-lock-open"></i></a>
            {% endif %}
        </h1>
        <div class="onePostContainer">
            <div class="onePostTopContainer">
                <figure class="oneTalkUserContainer">
                    {% if talk.user %}
                        <img src="{{ talk.user.profilePicture ? asset('uploads/' ~ talk.user.profilePicture) : asset('uploads/baseUser.png') }}" alt="User {{ talk.user.username }} profile picture" class="oneTalkUserImage">
                    {% else %}
                        <img src="{{ asset('uploads/baseUser.png') }}" alt="Deleted user profile picture" class="oneTalkUserImage">
                    {% endif %}
                    <figcaption class="oneTalkUsername post">
                        {% if talk.user %}
                            <a href="{{ path('show_user', { id: talk.user.id }) }}" title="{{ talk.user.username }}">{{ talk.user.username }}</a>
                        {% else %}
                            <p>Deleted User</p>
                        {% endif %}
                    </figcaption>
                </figure>
                {# Appel de la macro (fonction) pour l'affichage de la différence de temps entre la création de la discussion et maintenant #}
                {% set textCreation = _self.textTimeAgo(talk.posts|first.creationDate) %}
                <div class="oneTalkTopRightContainer">
                    <p class="oneTalkUserTime post" title="{{ talk.posts|first.creationDate|date('D, d M Y,  H:i', 'UTC') }} (UTC)"><i>Created {{ textCreation }}</i></p>
                    {# Si la discussion appartient à l'utilisateur et n'est pas verrouiller, ou si l'utilisateur est un admin, la discussion peut être supprimer #}
                    {% if (talk.user == app.user and not talk.locked) or is_granted('ROLE_ADMIN') %}
                        {% if app.user %}
                            <a href="{{ path('delete_discussion', { id: talk.id }) }}" class="talkDeleteLink" title="Delete this talk"><i class="fa-solid fa-trash-can"></i></a>
                        {% endif %}
                    {% endif %}
                </div>
            </div>
            <p class="animeRemainingRightContentPartOpinionsMidContent">{{ talk.posts|first.content }}</p>
            <div class="onePostBottomContainer">
            {% if talk.posts|first.creationDate != talk.posts|first.lastModifiedDate %}
                {# Appel de la macro (fonction) pour l'affichage de la différence de temps entre la dernière modification de la discussion et maintenant #}
                {% set textFirstModified = _self.textTimeAgo(talk.posts|first.lastModifiedDate) %}
                <p class="oneTalkUserTime post bottom" title="{{ talk.posts|first.lastModifiedDate|date('D, d M Y,  H:i', 'UTC') }} (UTC)"><i>Modified {{ textFirstModified }}</i></p>
            {% endif %}
            {% if app.user %}
                {# Si le post est liké par l'utilisateur #}
                {% if talk.user %}
                    {% if talk.posts|first.users.contains(app.user) %}
                        <a href="{{ path('unlike_post', { discussion_id: talk.id, id: talk.posts|first.id }) }}" class="onePostLikes" title="Unlike this post"><i class="fa-solid fa-heart"></i> <span class="onePostLikesNumber">{{ talk.posts|first.users|length }}</span></a>
                    {% else %}
                        <a href="{{ path('like_post', { discussion_id: talk.id, id: talk.posts|first.id }) }}" class="onePostLikes" title="Like this post"><i class="fa-regular fa-heart"></i> <span class="onePostLikesNumber">{{ talk.posts|first.users|length }}</span></a>
                    {% endif %}
                {% endif %}
            {% else %}
                {% if talk.user %}
                    <p class="onePostLikes" title="Log in to like this post"><i class="fa-regular fa-heart"></i> <span class="onePostLikesNumber">{{ talk.posts|first.users|length }}</span></p>
                {% endif %}
            {% endif %}
            </div>
        </div>
        <div class="oneTalkRepliesTopContainer">
            {% set responseNumber = talk.posts|length - 1 %}
            <p class="oneTalkRepliesNumber">
                {{ responseNumber }} {{ responseNumber > 1 ? 'Replies' : 'Reply' }}
                {# Si l'utilisateur est connecté et la discussion n'est pas verrouiller, l'utilisateur peut créer une discussion #}
                {% if app.user and not talk.locked %}
                    <a href="{{ path('add_post', { id: talk.id }) }}" class="profileInfosButton addPost" title="Reply to this discussion">Reply</a>
                {% endif %}
            </p>
            <p class="oneTalkFilterText"><span class="oneTalkFilterTextBefore">Filter by :</span> Date - Likes</p>
        </div>
        {% if talk.posts|length > 1 %}
            {% for post in talk.posts|slice(1) %}
            <div class="onePostContainer">
                <div class="onePostTopContainer">
                    <figure class="oneTalkUserContainer">
                        {% if post.user %}
                            <img src="{{ post.user.profilePicture ? asset('uploads/' ~ post.user.profilePicture) : asset('uploads/baseUser.png') }}" alt="User {{ post.user.username }} profile picture" class="oneTalkUserImage">
                        {% else %}
                            <img src="{{ asset('uploads/baseUser.png') }}" alt="Deleted user profile picture" class="oneTalkUserImage">
                        {% endif %}
                        <figcaption class="oneTalkUsername post">
                            {% if post.user %}
                                <a href="{{ path('show_user', { id: post.user.id }) }}">{{ post.user.username }}</a>
                            {% else %}
                                <p>Deleted user</p>
                            {% endif %}
                        </figcaption>
                    </figure>
                    {# Appel de la macro (fonction) pour l'affichage de la différence de temps entre la création du post et maintenant #}
                    {% set textPublication = _self.textTimeAgo(post.creationDate) %}
                    <div class="oneTalkTopRightContainer">
                        <p class="oneTalkUserTime post" title="{{ post.creationDate|date('D, d M Y,  H:i', 'UTC') }} (UTC)"><i>Created {{ textPublication }}</i></p>
                        <div class="oneTalkTopRightBottomLine">
                            {# Si le post appartient à l'utilisateur et n'est pas verrouillé, il pourra le modifier #}
                            {% if post.user == app.user and not talk.locked and post.user %}
                                <a href="{{ path('edit_post', { discussion_id: talk.id, id: post.id }) }}" class="settingsChangePseudo" title="Edit this post"><i class="fa-solid fa-pen-to-square"></i></a>            
                            {% endif %}
                            {# Si le post appartient à l'utilisateur et n'est pas verrouiller, ou si l'utilisateur est un admin, le peut être supprimer #}
                            {% if (post.user == app.user and not talk.locked) or is_granted('ROLE_ADMIN') %}
                                {% if app.user %}
                                    <a href="{{ path('delete_post', { discussion_id: talk.id, id: post.id }) }}" class="talkDeleteLink" title="Delete this post"><i class="fa-solid fa-trash-can"></i></a>
                                {% endif %}
                            {% endif %}
                        </div>
                    </div>
                </div>
                <p class="animeRemainingRightContentPartOpinionsMidContent">{{ post.content }}</p>
                <div class="onePostBottomContainer">
                {% if post.creationDate != post.lastModifiedDate %}
                    {# Appel de la macro (fonction) pour l'affichage de la différence de temps entre la dernière modification du post et maintenant #}
                    {% set textModified = _self.textTimeAgo(post.lastModifiedDate) %}
                    <p class="oneTalkUserTime post bottom" title="{{ post.lastModifiedDate|date('D, d M Y,  H:i', 'UTC') }} (UTC)"><i>Modified {{ textModified }}</i></p>
                {% endif %}
                {% if post.user %}
                    {% if app.user %}
                        {# Si le post est liké par l'utilisateur #}
                        {% if post.users.contains(app.user) %}
                            <a href="{{ path('unlike_post', { discussion_id: talk.id, id: post.id }) }}" class="onePostLikes" title="Unlike this post"><i class="fa-solid fa-heart"></i> <span class="onePostLikesNumber">{{ post.users|length }}</span></a>
                        {% else %}
                            <a href="{{ path('like_post', { discussion_id: talk.id, id: post.id }) }}" class="onePostLikes" title="Like this post"><i class="fa-regular fa-heart"></i> <span class="onePostLikesNumber">{{ post.users|length }}</span></a>
                        {% endif %}
                    {% else %}
                        <p class="onePostLikes" title="Log in to like this post"><i class="fa-regular fa-heart"></i> <span class="onePostLikesNumber">{{ post.users|length }}</span></p>
                    {% endif %}
                {% endif %}
                </div>
            </div>
            {% endfor %}
        {% endif %}
    </main>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    {% if app.user %}
        <script>
            // Récupération des boutons de like/unlike
            var likeButtons = document.querySelectorAll('.onePostLikes');  

            // Ajout d'un écouteur d'événements sur ces boutons
            likeButtons.forEach(function(button){
                button.addEventListener('click', async function(event){
                    // Empechement du comportement par défaut
                    event.preventDefault();
                    // Récupération du lien attribuer au bouton
                    var href = button.getAttribute('href');
                    try{
                        const response = await fetch(href, { method: 'POST' });
                        if(!response.ok){
                            throw new Error('Action Failed');
                        }
    
                        // Récupération du logo de like
                        const heart = button.querySelector('i');
                        // Récupération du nombre de likes
                        const likesNumber = button.querySelector('span.onePostLikesNumber');
                        // Vérification si le post est liker
                        const isLiked = heart.classList.contains('fa-solid');
    
                        // Modification du logo de like en fonction de si le post est like
                        heart.classList.toggle('fa-solid', !isLiked);
                        heart.classList.toggle('fa-regular', isLiked);
                        // Modification du lien en fonction de si le post est like 
                        button.setAttribute('href', href.replace(isLiked ? '/unlike' : '/like', isLiked ? '/like' : '/unlike'));
                        // Modification du title en fonction de si le post est like
                        button.setAttribute('title', isLiked ? 'Like this post' : 'Unlike this post');
                        // Modification du nombre de likes en fonction de si le post est liker ou pas
                        likesNumber.textContent = parseInt(likesNumber.textContent) + (isLiked ? -1 : 1);
                    }catch(error){
                        alert('Action failed');
                    }
                })
            })        
        </script>
    {% endif %}
{% endblock %}